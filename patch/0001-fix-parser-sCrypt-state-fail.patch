From a9db1547ca683fd73594120c8f3b064fc6c0cd77 Mon Sep 17 00:00:00 2001
From: hh <hh@scrypt.io>
Date: Wed, 22 Jun 2022 10:19:15 +0800
Subject: [PATCH] fix parser sCrypt state fail

---
 bscript/interpreter/opcodeparser.go | 31 +++++++----------------------
 1 file changed, 7 insertions(+), 24 deletions(-)

diff --git a/bscript/interpreter/opcodeparser.go b/bscript/interpreter/opcodeparser.go
index 02124a6..4deebe1 100644
--- a/bscript/interpreter/opcodeparser.go
+++ b/bscript/interpreter/opcodeparser.go
@@ -2,7 +2,6 @@ package interpreter
 
 import (
 	"bytes"
-	"encoding/binary"
 
 	"github.com/libsv/go-bt/v2/bscript"
 	"github.com/libsv/go-bt/v2/bscript/interpreter/errs"
@@ -150,10 +149,12 @@ func (p *DefaultOpcodeParser) Parse(s *bscript.Script) (ParsedScript, error) {
 			i++
 		case parsedOp.op.length > 1:
 			if len(script[i:]) < parsedOp.op.length {
-				return nil, errs.NewError(errs.ErrMalformedPush, "opcode %s required %d bytes, script has %d remaining",
-					parsedOp.Name(), parsedOp.op.length, len(script[i:]))
+
+				parsedOp.Data = script[i+1:]
+			} else {
+				parsedOp.Data = script[i+1 : i+parsedOp.op.length]
 			}
-			parsedOp.Data = script[i+1 : i+parsedOp.op.length]
+
 			i += parsedOp.op.length
 		case parsedOp.op.length < 0:
 			var l uint
@@ -281,45 +282,27 @@ func (o *ParsedOpcode) bytes() ([]byte, error) {
 
 	retbytes[0] = o.op.val
 	if o.op.length == 1 {
-		if len(o.Data) != 0 {
-			return nil, errs.NewError(
-				errs.ErrInternal,
-				"internal consistency error - parsed opcode %s has data length %d when %d was expected",
-				o.Name(), len(o.Data), 0,
-			)
-		}
+
 		return retbytes, nil
 	}
-	nbytes := o.op.length
+
 	if o.op.length < 0 {
 		l := len(o.Data)
 		// tempting just to hardcode to avoid the complexity here.
 		switch o.op.length {
 		case -1:
 			retbytes = append(retbytes, byte(l))
-			nbytes = int(retbytes[1]) + len(retbytes)
 		case -2:
 			retbytes = append(retbytes, byte(l&0xff),
 				byte(l>>8&0xff))
-			nbytes = int(binary.LittleEndian.Uint16(retbytes[1:])) +
-				len(retbytes)
 		case -4:
 			retbytes = append(retbytes, byte(l&0xff),
 				byte((l>>8)&0xff), byte((l>>16)&0xff),
 				byte((l>>24)&0xff))
-			nbytes = int(binary.LittleEndian.Uint32(retbytes[1:])) +
-				len(retbytes)
 		}
 	}
 
 	retbytes = append(retbytes, o.Data...)
 
-	if len(retbytes) != nbytes {
-		return nil, errs.NewError(errs.ErrInternal,
-			"internal consistency error - parsed opcode %s has data length %d when %d was expected",
-			o.Name(), len(retbytes), nbytes,
-		)
-	}
-
 	return retbytes, nil
 }
-- 
2.30.1 (Apple Git-130)

